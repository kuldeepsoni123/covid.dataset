# -*- coding: utf-8 -*-
"""Kuldeepsoni

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TF-eiF9CDEtV_9tMr9EYzpeQHGmm5jup

Hi Mam,

My name is Kuldeep Soni.I worked on covid dataset.

Information about dataset : The country_wise_latest.csv dataset can be used to analyze the spreading of covid-19. It can also be used to explore various things like deaths and recovery of the covid patients
"""

# import lib
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Load the data
df = pd.read_csv("country_wise_latest.csv")

#print the first 9 rows
df.head(9)

#print the last 8 rows of the DataFrame
df.tail(8)

#it will print index dtype and column dtypes, non-null values and memory usage
df.info()

#it will drop the state columns
X = df.drop(columns=['New deaths'])
y = df['New deaths']

X

y

#it will print datatype
df.dtypes

#it will count the data in each column
df.count()

#it will print the null value in each column
print(df.isnull().sum())

# It calculates the following statistics for each column
df.describe()

# get the count of each unique value in the state colum
df['Country/Region'].value_counts()

df['Confirmed'].value_counts().plot(kind="bar")

#creates a box plot of the Year
sns.boxplot(x=df["Deaths"])

# Visualize the dataset using pair plots or scatter matrix
sns.pairplot(df)
plt.show()

3b nj7ew

#, technique used to remove outliers from a dataset
Q1 =df.quantile(0.25)
Q3 = df.quantile(0.75)
IQR = Q3 - Q1
data = df[~((df < (Q1 - 1.5 * IQR)) |(df> (Q3 + 1.5 * IQR))).any(axis=1)]

#  count plot of the active count of patients
sns.countplot(x="Active",data=data)

#herer we got the recovered and deaths by covid
plt.scatter(data["Deaths"],data["Recovered"])

# it will print box plot in x realtion with former smoker and y with Year
sns.boxplot(x="Country/Region",y="Deaths",data=data)

#create heatmap graph plot
sns.heatmap(df.corr(), annot=True)
plt.show()

# Plot a histogram of the 'Price in INR' column with KDE (Kernel Density Estimation)
# Display the histogram
sns.histplot(df['New cases'], kde=True)
plt.show()

#selects all rows and all columns except the last column from the DataFrame and print table
x=df.iloc[::,:-1 ]
x.head()

y=data.iloc[:,-1]
y.head()

#calculates the skewness of the values
df.skew(axis = 0, skipna = True)

#technique that converts categorical data into numerical data#
le = LabelEncoder()

for column in df.columns:
    if df[column].dtype == "object":
        df[column] = le.fit_transform(df[column])

#imports the train_test_split function from the sklearn.model_selection module
from sklearn.model_selection import train_test_split
df = df.replace(np.inf, 1e100)
df = df.replace(-np.inf, -1e100)
X_train, X_test, y_train, y_test = train_test_split(df, df["Country/Region"], test_size=0.3, random_state=42)

from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import LabelEncoder

from sklearn.metrics import classification_report,confusion_matrix

#creates a new instance of the LogisticRegression
model = LogisticRegression()
#fits the model
model.fit(X_train, y_train)

#make a prediction using a trained model
ypred=model.predict(X_test)

#print classification report  on model
print(classification_report(y_test,ypred))

#accuracy of a model or datafarme
model.score(X_train,y_train)

x.head()

#predicate the table values add to function for logistic reg and predict
def new_prediction():
  Country_Region=int(input('Enter Country/Region : '))
  Confirmed=int(input('Enter Confirmed Case : '))
  Deaths	=int(input('Enter a  Deaths	case : '))
  Recovered=int(input('Enter the  Recovered case: '))
  Active=int(input('Enter Active	case	 : '))
  New_cases=int(input('Enter New cases	case	 : '))
  New_deaths=int(input('Enter New deaths case	 : '))
  New_recovered=int(input('Enter New recovered Case: '))
  Deaths_100_Cases=int(input('Enter Deaths / 100 Cases Case: '))
  Recovered_100_Cases=int(input('Enter Recovered / 100 Cases Case: '))
  Deaths_100_Recovered=int(input('Enter Deaths / 100 Recovered Case: '))
  Confirmed_last_week=int(input('Enter Confirmed last week Case: '))
  Confirmed_last_week=int(input('Enter Confirmed last week Case: '))
  _1_week_change=int(input('Enter 1_week_change week Case: '))
  _1_week_increase=int(input('Enter _1_week_increase Case: '))
  return([[Country_Region,Confirmed,Deaths,Recovered,Active,New_cases,New_deaths,New_recovered,Deaths_100_Cases,Recovered_100_Cases,Deaths_100_Recovered,Confirmed_last_week,Confirmed_last_week,_1_week_change,_1_week_increase]])

new_x=new_prediction()
pred=model.predict(new_x)
if pred==1:
  print('Your country has corona paitent')
else :
  print("Your country has no corona paitent!")